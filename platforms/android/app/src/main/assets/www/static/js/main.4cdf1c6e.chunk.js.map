{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","searchVille","urls","coords","useState","collapsed","setCollapsed","searchByGeo","onError","error","alert","code","message","showLatLng","position","callApi","e","key","document","getElementById","value","latitude","longitude","Promise","all","map","url","fetch","then","responseJSON","json","jsonResponse","console","log","cod","meteoDay","list","meteoPrev","Object","iconList","minTemp","maxTemp","desc","prev","push","weather","icon","Math","round","main","temp_min","temp_max","description","meteo","ville","name","temp","tempMin","tempMax","textContent","setAttribute","prevMax","catch","className","Navbar","expand","color","light","NavbarBrand","href","src","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","Container","Row","Col","id","InputGroup","Input","type","placeholder","InputGroupAddon","addonType","Button","faSearch","navigator","geolocation","getCurrentPosition","faStreetView","xs","md","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4cdf1c6e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Input, InputGroup, InputGroupAddon, Button, Navbar, Nav, NavbarBrand, NavItem, NavLink, Container, Row, Col, NavbarToggler, Collapse } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch, faCloudShowersHeavy, faCloud, faSun, faStreetView } from '@fortawesome/free-solid-svg-icons'\n\n// import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [collapsed, setCollapsed] = useState(true);\n  const toggleNavbar = () => setCollapsed(!collapsed);\n\n  const prevMax = 4;//prevision à <prev> jours max\n\n  let searchVille; //recup du form qui agit sur la recherche meteo\n  var urls; //list of urls to fecth\n\n  //localisation\n  var searchByGeo = \"N\" //par defaut nous ne sommes pas en geoloc\n  var coords;\n  // onError Callback receives a PositionError object\n  //\n  function onError(error) {\n    alert('code: ' + error.code + '\\n' +\n      'message: ' + error.message + '\\n');\n  }\n  function showLatLng(position) {\n    coords = position.coords //recup des data de geoloc\n  }\n\n  // let e;\n  //gestion action sur geoloc\n  function searchByCoordMgt(e) {\n    if (document.getElementById('ville').value !== \"\") {\n      document.getElementById('ville').value = \"\"\n    }\n    searchByGeo = \"Y\"\n    navigator.geolocation.getCurrentPosition(showLatLng, onError)\n    callApi(e)\n  }\n\n  //appal à l'API\n  function callApi(e) {\n    const key = '1dd3c8021c34d1578422220b96a85c1a'\n\n    // (e) ? e.preventDefault() : false //si pas d'evenement capté, on ne fait rien\n\n    searchVille = document.getElementById('ville').value\n    if (searchVille !== \"\") {\n      urls = [`https://api.openweathermap.org/data/2.5/find?q=${searchVille}&units=metric&appid=${key}&lang=fr`, `https://api.openweathermap.org/data/2.5/forecast?q=${searchVille}&units=metric&appid=${key}&lang=fr`];\n    } else if (searchByGeo == \"Y\") {\n      urls = [`https://api.openweathermap.org/data/2.5/find?lat=${coords.latitude}&lon=${coords.longitude}&units=metric&appid=${key}&lang=fr`, `https://api.openweathermap.org/data/2.5/forecast?lat=${coords.latitude}&lon=${coords.longitude}&units=metric&appid=${key}&lang=fr`];\n    }\n\n    if (urls !== \"\") {\n\n      Promise.all(urls.map(url =>\n        fetch(url).then(responseJSON => responseJSON.json())\n      )).then(jsonResponse => {\n        console.log(jsonResponse);\n        if (jsonResponse[0].cod == \"200\") {\n          //recup des erreur if any et gestion plus fine\n          console.log('reponse' + jsonResponse);\n\n          //meteo du jour\n          let meteoDay = jsonResponse[0].list[0];\n\n          //formatage en tableau des donnée sur les <prevMax> jours à venir\n          let meteoPrev = new Object(); //objet qui contiendra toutes les prev\n          let iconList = [] //sous tableau qui sera dans l'attribut icones\n          let minTemp = [] //sous tableau qui sera dans l'attribut temp min\n          let maxTemp = [] //sous tableau qui sera dans l'attribut temp max\n          let desc = [] //sous tableau qui sera dans l'attribut description\n          for (let prev = 1; prev <= prevMax; prev++) {\n            iconList.push(jsonResponse[1].list[prev * 8].weather[0].icon) //feedeing des tableaux\n            minTemp.push(Math.round(jsonResponse[1].list[prev * 8].main.temp_min))\n            maxTemp.push(Math.round(jsonResponse[1].list[prev * 8].main.temp_max))\n            desc.push(jsonResponse[1].list[prev * 8].weather[0].description)\n          }\n          //assignation des tableaux en valuer des attiributs de l'objet meteoPrev\n          meteoPrev.icon = iconList\n          meteoPrev.minTemp = minTemp\n          meteoPrev.maxTemp = maxTemp\n          meteoPrev.desc = desc\n\n          // console.log(meteoPrev)\n\n          let meteo = {\n            ville: meteoDay.name,\n            temp: meteoDay.main.temp,\n            tempMin: meteoDay.main.temp_min,\n            tempMax: meteoDay.main.temp_max,\n            icon: meteoDay.weather[0].icon,\n            desc: meteoDay.weather[0].main.desc,\n            prev: meteoPrev //on injecte l'objet meteoPrev dans l'objet global meteo pour pouvoir y accéder plus simplement\n          };\n\n          // console.log(\"meteo\")\n          // console.log(meteo)\n\n          document.getElementById('villeSynth').textContent = meteo.ville\n          document.getElementById('tempSynthIcon').setAttribute('src', `https://openweathermap.org/img/wn/${meteo.icon}@2x.png`)\n          document.getElementById('tempSynthIcon').setAttribute('alt', `${meteo.desc}`)\n          document.getElementById('currentTemp').textContent = `${Math.round(meteo.temp)}°`\n          document.getElementById('tempUnit').textContent = `C`\n          document.getElementById('synthMin').textContent = `Min: ${Math.round(meteo.tempMin)}°C`\n          document.getElementById('synthMax').textContent = `Max: ${Math.round(meteo.tempMax)}°C`\n\n\n          for (let prev = 0; prev <= prevMax - 1; prev++) {\n            document.getElementById(`weatherIcon${prev + 1}`).setAttribute('src', `https://openweathermap.org/img/wn/${meteo.prev.icon[prev]}@2x.png`)\n            document.getElementById(`weatherDesc${prev + 1}`).textContent = `${meteo.prev.desc[prev]}`\n            document.getElementById(`prev${prev + 1}Min`).textContent = `Min: ${meteo.prev.minTemp[prev]}°C`\n            document.getElementById(`prev${prev + 1}Max`).textContent = `Max: ${meteo.prev.maxTemp[prev]}°C`\n          }\n\n        } else if (jsonResponse[0].cod == \"401\") {\n          console.log(jsonResponse.message);\n        }\n      })\n        .catch(function (error) {\n          //recup des erreur if any\n          console.log(error);\n        });\n    }\n  }\n\n  //rendu html react\n  return (\n    <div className=\"App\">\n      <Navbar expand=\"md\" color=\"light\" light>\n        <NavbarBrand href=\"/\" className=\"mr-auto\"><img className=\"logo\" src=\"img/meteo-logo.png\" alt=\"logo\" /></NavbarBrand>\n        <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\n        <Collapse isOpen={!collapsed} navbar>\n          <Nav navbar>\n            <NavItem>\n              <NavLink href=\"\">Lien1</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"\">Lien2</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"\">Lien3</NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n      <header className=\"App-header\">\n        <Container>\n          <Row className=\"synth\">\n            <Col className=\"villeSynth\">\n              <h1 id=\"villeSynth\"></h1>\n              <p>aujourd'</p>\n            </Col>\n          </Row>\n          <Row className=\"synth\">\n            <Col className=\"tempSynthIcon\"><img id=\"tempSynthIcon\" src=\"\" alt=\"\" /></Col>\n            <Col className=\"tempSynth\"><span id=\"currentTemp\" className=\"tempSyntNnbr\"></span><span id=\"tempUnit\" className=\"tempUnit\"></span></Col>\n            <Col className=\"tempSynth\"><p className=\"max\" id=\"synthMax\"></p><p className=\"min\" id=\"synthMin\"></p></Col>\n          </Row>\n          <Row>\n            <Col>\n              <InputGroup className=\"input-group-lg\">\n                <Input type=\"text\" id=\"ville\" name=\"ville\" placeholder=\"Recherche ville...\" />\n                <InputGroupAddon addonType=\"append\"><Button id=\"searchBtn\" onClick={callApi}><FontAwesomeIcon icon={faSearch} /></Button></InputGroupAddon>\n                <InputGroupAddon addonType=\"append\"><Button id=\"geoBtn\" onClick={searchByCoordMgt}><FontAwesomeIcon icon={faStreetView} /></Button></InputGroupAddon>\n              </InputGroup>\n\n            </Col>\n          </Row>\n        </Container>\n      </header>\n\n      <main className=\"App-main\">\n        <Container>\n          <Row className=\"previsions\">\n            <Col className=\"prevision\" xs=\"12\" md=\"5\"><h2>Prévision +1</h2><div className=\"prevSynth\"><img className=\"weatherIcon\" id=\"weatherIcon1\" src=\"\" alt=\"\" /><div className=\"minMax\"><p className=\"min\" id=\"prev1Min\"></p><p id=\"prev1Max\" className=\"max\"></p></div></div><p className=\"weatherDesc\" id=\"weatherDesc1\"></p></Col>\n            <Col className=\"prevision\" xs=\"12\" md=\"5\"><h2>Prévision +2</h2><div className=\"prevSynth\"><img className=\"weatherIcon\" id=\"weatherIcon2\" src=\"\" alt=\"\" /><div className=\"minMax\"><p className=\"min\" id=\"prev2Min\"></p><p id=\"prev2Max\" className=\"max\"></p></div></div><p className=\"weatherDesc\" id=\"weatherDesc2\"></p></Col>\n            <Col className=\"prevision\" xs=\"12\" md=\"5\"><h2>Prévision +3</h2><div className=\"prevSynth\"><img className=\"weatherIcon\" id=\"weatherIcon3\" src=\"\" alt=\"\" /><div className=\"minMax\"><p className=\"min\" id=\"prev3Min\"></p><p id=\"prev3Max\" className=\"max\"></p></div></div><p className=\"weatherDesc\" id=\"weatherDesc3\"></p></Col>\n            <Col className=\"prevision\" xs=\"12\" md=\"5\"><h2>Prévision +4</h2><div className=\"prevSynth\"><img className=\"weatherIcon\" id=\"weatherIcon4\" src=\"\" alt=\"\" /><div className=\"minMax\"><p className=\"min\" id=\"prev4Min\"></p><p id=\"prev4Max\" className=\"max\"></p></div></div><p className=\"weatherDesc\" id=\"weatherDesc4\"></p></Col>\n          </Row>\n        </Container>\n      </main>\n      <footer>&copy; First React App</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}